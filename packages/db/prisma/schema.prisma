// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider        = "postgresql"
    url             = env("DATABASE_URL")
}

model Collection {
    id          String @id @default(cuid())
    name        String
    description String?
    slug        String @unique
    userId      String

    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    items       Item[]
    tags        Tag[]

    createdAt   DateTime
    @@index([userId])
    @@index([slug])
}

model Item {
    id              String @id @default(cuid())
    name            String
    description     String?
    slug            String 
    collectionId    String
    defaultImageId  String? @unique

    collection      Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    images          ItemImage[] @relation("images")
    defaultImage    ItemImage? @relation(fields: [defaultImageId], references: [id])
    tags            ItemTag[]

    createdAt       DateTime
    
    @@unique([slug, collectionId])
    @@index([collectionId])
    @@index([slug])
} 

model Tag {
    id              String @id @default(cuid())
    text            String @unique
    collectionId    String

    collection      Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    itemTags        ItemTag[]

    createdAt       DateTime

    @@index([collectionId])
}

model ItemTag {
    id              String @id @default(cuid())
    tagId           String
    itemId          String

    item            Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    tag             Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)
    createdAt       DateTime

    @@index([tagId])
    @@index([itemId])
}

model ItemImage {
    id              String @id @default(cuid())
    itemId          String
    externalImageId String
    thumbhash       String

    name            String?
    description     String?

    item            Item @relation("images", fields: [itemId], references: [id], onDelete: Cascade)
    defaultItem     Item? @relation()

    createdAt       DateTime
    
    @@index([itemId])
} 

model Feedback {
    id              String @id @default(cuid())
    authorId        String

    text            String
    needsResponse   Boolean
    responded       Boolean

    author          User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    createdAt       DateTime
}

// -------------------
// NextAuth.js Models
// -------------------
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String @map("provider_account_id")
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    refresh_token_expires_in Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    username      String    @unique
    password      String?
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    createdAt     DateTime

    accounts      Account[]
    sessions      Session[]

    collections   Collection[]
    feedback      Feedback[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}